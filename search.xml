<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据结构</title>
      <link href="/2019/10/28/shu-ju-jie-gou-jian-jie/"/>
      <url>/2019/10/28/shu-ju-jie-gou-jian-jie/</url>
      
        <content type="html"><![CDATA[<p>#数据结构</p><p>数据结构是相互之间存在的一种或多种特定关系的数据元素的集合。</p><ul><li><p>逻辑结构：集合结构，线性结构，树形结构，图形结构。</p></li><li><p>物理结构：顺序存储结构，链式存储结构。</p></li></ul><p>#定义</p><ul><li><p>集合结构：集合结构中的数据元素除了同属于一个集合外，它们之间没有其它关系，各个数据元素之间是平等的。</p></li><li><p>线性结构：数据元素之间是一对一的关系。</p></li><li><p>树形结构：数据元素之间存在一对多的关系。</p></li><li><p>图形结构：数据元素之间是多对多的关系。</p></li><li><p>顺序存储结构：把数据元素存放在地址连续的存储单元里。</p></li><li><p>链式存储结构：把数据元素存放在任意的存储单元里，可以是连续的，也可以是不连续的。</p></li><li><p>数据类型：是☞一组性质相同的值的集合及定义在此集合上的一些操作的总称。</p></li></ul><p>#算法</p><p>##定义</p><p>算法是解决特定问题求解问题的描述，在计算机中表现为指令的有限序列。</p><ul><li>特性：输入，输出，有穷性，确定性和可行性。</li><li>要求：正确性、可读性、健壮性、高效率和低存储量需求。</li></ul><p>#线性表</p><p>##定义</p><p>指的是用一段地址连续的存储单元依次存储线性表的数据元素。即物理地址连续。</p><p>###链表的插入<br>获得链表数据第i个的思路：</p><p>1.声明一个指针p指向链表的第一个结点。</p><p>2.当j&lt;i时，，就遍历链表让p的指针向后移动，不断指向下一个节点，j累加一。</p><p>3.若到链表末尾p为空，则说明第i个结点不存在。</p><p>4.否则查找成功，返回结点p的数据。</p><p>#栈<br>定义：是限定在栈顶进行插入和删除操作的线性表。</p><p>特性：先进后出</p><p>#队列<br>定义：只允许在另一端进行插入操作，而在另一端进行删除操作的线性表。</p><p>特性：先进先出</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序结构 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习</title>
      <link href="/2019/10/26/javascript-ji-ben-zhi-shi/"/>
      <url>/2019/10/26/javascript-ji-ben-zhi-shi/</url>
      
        <content type="html"><![CDATA[<p>#简诉</p><p>JavaScript是一种面向对象的动态语言，它包含类型，运算符标准内置对象和方法。它的来源于Java和c，它们的语法很像，需要注意的一点是JavaScript不支持类。</p><p>#数据类型和结构</p><p>##1.动态类型</p><p>JavaScript是一种弱类型的语言。这意味着不用提前声明变量的类型，在程序运行过程中，类型会被自动确定。</p><p>var foo=42;<br>var foo=”abc”;<br>var foo=true;</p><p>##2.数据类型<br>基本类型</p><p>*NUll(空，只有一个值)</p><p>*undefined(未定义，没有被赋值的变量的默认值是undefined)</p><p>*Number(数字)</p><p>*String(字符串)</p><p>*Array(数组)</p><p>*Function(函数)</p><p>*RegExp(正则表达式)</p><p>#作用域</p><p>作用域就是变量于函数可访问的范围，即作用域控制着变量于函数的<br>生命周期，在JavaScript中作用域有全局作用域和局部作用域两种。</p><p>##1.全局作用域</p><p>在代码中任何地方都能访问到的对象拥有全局作用域。</p><p>*最外层函数和在最外层函数外面定义的变量拥有全局作用域。</p><p>*所有未定义的而直接赋值的变量自动声明为拥有全局作用域。</p><p>##2.局部作用域</p><p>局部作用域一般只在固定的代码片段内可以访问，最常见的是在函数内部。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 语言学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言 </tag>
            
            <tag> 脚本语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件程序设计原则</title>
      <link href="/2019/10/18/ruan-jian-she-ji-yuan-ze/"/>
      <url>/2019/10/18/ruan-jian-she-ji-yuan-ze/</url>
      
        <content type="html"><![CDATA[<p><strong><strong>一、前言</strong></strong><br>软件也像人一样，具有生命力，从出生到死亡，会经历多种变化。软件架构设计不是一蹴而就的，是不断的演进发展的。每个程序员都可以从理解编程原则中受益。</p><p>软件设计原则是一组帮助我们避开不良设计的指导方针。根据Robert Martin的理论，应该避免不良设计的几个重要的特点:</p><p> 儒化：很难做改动，因为每一个细微的改动都会影响到系统大量的其它功能<br><br>脆弱：每当你做一次改动，总会引起系统中预期之外的部分出现故障<br><br>死板：代码很那在其它应用中重用，因其不能从中单独抽离出来<br></p><p><strong>二、通用设计原则</strong><br><br>1.kiss<br>所谓kiss原则，是指设计要坚持的简约原则，避免不必要的复杂化，并且易于修改。</p><p>简单清晰，功能强大是软件设计最重要的原则和目标，但是软件工程天然错综复杂，而简单却没有一个衡量标准，判断一个东西2是不是简单，可以从以下方式来参考。</p><p>1.让别的软件工程师以一种简单的方式使用你的方案。<br>2.简单不是走捷径，不是为手边的问题随便找一种方案。<br>3.当系统变得更庞大更复杂的时候依然能够被理解<br>4.如果系统无法保持简单，那么我们能做的就是保持各个局部简单，<br>即任何单个的类，模块，应用的设计目标及工作与原理都能很快被理解</p><blockquote><p>我的理解：保持简单但不能掩盖软件丰富的内涵。我认为就是简约而不简单。软件设计就是要简单而不能丢失了内涵。</p></blockquote><p>2.DRY<br>所谓DRY原则就是不要让自己重复</p><p>重复代码是软件程序变烂的万恶之源。这个设计原则并不是指你不能复制代码，而是你复制的代码不能包含重复的信息。</p><blockquote><p>我的理解：解决重复的最佳方式是要有良好的编码习惯。</p></blockquote><p>分离方式</p><p>简单介绍一些分层的思想和方式：</p><p>1.纵向分离：常见的三层架构</p><p>2.横向分离：拆分模块或子系统</p><p>3.扩展分离：如果基于某种设计，原先不具有某些行为需要增加，可以考虑通过扩展或插件的形式来完成，将这些功能放入到插件或扩展中。</p><p>反转分离：很多依赖注入的框架，如spring等等，可以帮助我们做依赖反转，从而倒置依赖关系。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象编程 </tag>
            
            <tag> 设计原则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客使用</title>
      <link href="/2019/10/08/blog-open-source/"/>
      <url>/2019/10/08/blog-open-source/</url>
      
        <content type="html"><![CDATA[<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/" target="_blank" rel="noopener">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li>集成了<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li></ul><p><strong>简写hexo命令：</strong></p><ol><li>运行命令<code>hexo  clean</code>（清除生成文件），<code>hexo g</code>（生成网页）， <code>hexo  s</code>（本地预览），<code>hexo d</code>（部署）</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
